#!/usr/bin/env python3
"""
Test simple des nouveaux tools sans d√©pendances
"""

import os
import json
import re
from pathlib import Path

def test_files_exist():
    """V√©rifier que tous les fichiers n√©cessaires existent"""
    print("üìÅ V√©rification des fichiers...")
    
    required_files = [
        "src/hybrid_server.py",
        "src/pure_mcp_server.py", 
        "src/kodi_client.py",
        "src/config.py",
        "Dockerfile",
        ".env.example"
    ]
    
    for file_path in required_files:
        if Path(file_path).exists():
            print(f"  ‚úÖ {file_path}")
        else:
            print(f"  ‚ùå {file_path} MANQUANT")
            return False
    
    return True

def test_new_tools_in_hybrid_server():
    """V√©rifier les nouveaux tools dans le serveur hybride"""
    print("\nüîç V√©rification serveur hybride...")
    
    try:
        with open("src/hybrid_server.py", 'r', encoding='utf-8') as f:
            content = f.read()
        
        # V√©rifier la pr√©sence des nouveaux tools dans MCP_TOOLS
        new_tools = ["list_downloads", "play_file", "search_downloads"]
        
        for tool in new_tools:
            if f'"{tool}"' in content:
                print(f"  ‚úÖ Tool {tool} trouv√©")
            else:
                print(f"  ‚ùå Tool {tool} MANQUANT")
                return False
        
        # V√©rifier les fonctions d'ex√©cution
        if "list_downloads_files(" in content:
            print("  ‚úÖ Fonction list_downloads_files trouv√©e")
        else:
            print("  ‚ùå Fonction list_downloads_files MANQUANTE")
            return False
        
        if "search_downloads_files(" in content:
            print("  ‚úÖ Fonction search_downloads_files trouv√©e")
        else:
            print("  ‚ùå Fonction search_downloads_files MANQUANTE")
            return False
        
        # V√©rifier l'int√©gration dans execute_tool
        execute_tool_section = re.search(r'def execute_tool.*?return payload', content, re.DOTALL)
        if execute_tool_section:
            execute_content = execute_tool_section.group(0)
            for tool in new_tools:
                if f'elif name == "{tool}"' in execute_content:
                    print(f"  ‚úÖ Logique d'ex√©cution {tool} trouv√©e")
                else:
                    print(f"  ‚ùå Logique d'ex√©cution {tool} MANQUANTE")
                    return False
        
        return True
        
    except Exception as e:
        print(f"‚ùå Erreur lecture serveur hybride: {e}")
        return False

def test_new_tools_in_pure_server():
    """V√©rifier les nouveaux tools dans le serveur MCP pur"""
    print("\nüîç V√©rification serveur MCP pur...")
    
    try:
        with open("src/pure_mcp_server.py", 'r', encoding='utf-8') as f:
            content = f.read()
        
        # V√©rifier la pr√©sence dans MCP_TOOLS_SPEC
        new_tools = ["list_downloads", "play_file", "search_downloads"]
        
        for tool in new_tools:
            if f'"name": "{tool}"' in content:
                print(f"  ‚úÖ Tool {tool} dans MCP_TOOLS_SPEC")
            else:
                print(f"  ‚ùå Tool {tool} MANQUANT dans MCP_TOOLS_SPEC")
                return False
        
        # V√©rifier les fonctions auxiliaires
        if "list_downloads_files(" in content:
            print("  ‚úÖ Fonction list_downloads_files trouv√©e")
        else:
            print("  ‚ùå Fonction list_downloads_files MANQUANTE")
            return False
        
        # V√©rifier l'int√©gration dans execute_kodi_tool
        execute_section = re.search(r'def execute_kodi_tool.*?except Exception', content, re.DOTALL)
        if execute_section:
            execute_content = execute_section.group(0)
            for tool in new_tools:
                if f'elif name == "{tool}"' in execute_content:
                    print(f"  ‚úÖ Logique d'ex√©cution {tool} trouv√©e")
                else:
                    print(f"  ‚ùå Logique d'ex√©cution {tool} MANQUANTE")
                    return False
        
        return True
        
    except Exception as e:
        print(f"‚ùå Erreur lecture serveur MCP pur: {e}")
        return False

def test_client_methods():
    """V√©rifier les nouvelles m√©thodes du client"""
    print("\nüîç V√©rification client Kodi...")
    
    try:
        with open("src/kodi_client.py", 'r', encoding='utf-8') as f:
            content = f.read()
        
        new_methods = ["list_directory", "search_in_directory", "play_file", "format_file_size"]
        
        for method in new_methods:
            if f"def {method}(" in content:
                print(f"  ‚úÖ M√©thode {method} trouv√©e")
            else:
                print(f"  ‚ùå M√©thode {method} MANQUANTE")
                return False
        
        return True
        
    except Exception as e:
        print(f"‚ùå Erreur lecture client Kodi: {e}")
        return False

def test_configuration():
    """V√©rifier la nouvelle configuration"""
    print("\nüîç V√©rification configuration...")
    
    try:
        # V√©rifier dans config.py
        with open("src/config.py", 'r', encoding='utf-8') as f:
            config_content = f.read()
        
        if "kodi_downloads_path" in config_content:
            print("  ‚úÖ Variable kodi_downloads_path dans config.py")
        else:
            print("  ‚ùå Variable kodi_downloads_path MANQUANTE dans config.py")
            return False
        
        # V√©rifier dans .env.example
        with open(".env.example", 'r', encoding='utf-8') as f:
            env_content = f.read()
        
        if "KODI_DOWNLOADS_PATH" in env_content:
            print("  ‚úÖ Variable KODI_DOWNLOADS_PATH dans .env.example")
        else:
            print("  ‚ùå Variable KODI_DOWNLOADS_PATH MANQUANTE dans .env.example")
            return False
        
        return True
        
    except Exception as e:
        print(f"‚ùå Erreur v√©rification config: {e}")
        return False

def test_dockerfile():
    """V√©rifier que le Dockerfile utilise le serveur hybride"""
    print("\nüîç V√©rification Dockerfile...")
    
    try:
        with open("Dockerfile", 'r', encoding='utf-8') as f:
            content = f.read()
        
        if "src.hybrid_server:app" in content:
            print("  ‚úÖ Dockerfile utilise src.hybrid_server:app")
        else:
            print("  ‚ùå Dockerfile n'utilise pas src.hybrid_server:app")
            if "src.pure_mcp_server:app" in content:
                print("  ‚ö†Ô∏è  Dockerfile utilise encore src.pure_mcp_server:app")
            return False
        
        return True
        
    except Exception as e:
        print(f"‚ùå Erreur lecture Dockerfile: {e}")
        return False

def count_tools():
    """Compter le nombre total de tools"""
    print("\nüìä Comptage des tools...")
    
    try:
        # Serveur hybride
        with open("src/hybrid_server.py", 'r', encoding='utf-8') as f:
            hybrid_content = f.read()
        
        # Chercher MCP_TOOLS = {
        mcp_tools_match = re.search(r'MCP_TOOLS = \{(.*?)\}', hybrid_content, re.DOTALL)
        if mcp_tools_match:
            tools_content = mcp_tools_match.group(1)
            # Compter les outils (chaque outil commence par "nom_tool": {)
            tool_count = len(re.findall(r'"[^"]+"\s*:', tools_content))
            print(f"  üìà Serveur hybride: {tool_count} tools")
        
        # Serveur MCP pur
        with open("src/pure_mcp_server.py", 'r', encoding='utf-8') as f:
            pure_content = f.read()
        
        # Chercher MCP_TOOLS_SPEC = [
        spec_match = re.search(r'MCP_TOOLS_SPEC = \[(.*?)\]', pure_content, re.DOTALL)
        if spec_match:
            spec_content = spec_match.group(1)
            # Compter les tools (chaque tool a "name": "nom")
            tool_count = len(re.findall(r'"name":\s*"[^"]+"', spec_content))
            print(f"  üìà Serveur MCP pur: {tool_count} tools")
        
        # Devraient avoir 15 tools (12 originaux + 3 nouveaux)
        expected_count = 15
        print(f"  üéØ Attendu: {expected_count} tools")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Erreur comptage tools: {e}")
        return False

def show_new_tools_details():
    """Afficher les d√©tails des nouveaux tools"""
    print("\nüé¨ D√©tails des nouveaux tools...")
    
    try:
        with open("src/hybrid_server.py", 'r', encoding='utf-8') as f:
            content = f.read()
        
        new_tools = ["list_downloads", "play_file", "search_downloads"]
        
        for tool in new_tools:
            # Rechercher la d√©finition du tool
            pattern = f'"{tool}".*?"description":\s*"([^"]+)"'
            match = re.search(pattern, content, re.DOTALL)
            if match:
                description = match.group(1)
                print(f"  üéØ {tool}: {description}")
            else:
                print(f"  ‚ùì {tool}: Description non trouv√©e")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Erreur lecture d√©tails: {e}")
        return False

def main():
    """Fonction principale de test"""
    print("üé¨ Test Simple des Nouveaux Tools MCP Kodi")
    print("=" * 60)
    
    tests = [
        ("Fichiers requis", test_files_exist),
        ("Tools serveur hybride", test_new_tools_in_hybrid_server),
        ("Tools serveur MCP pur", test_new_tools_in_pure_server),
        ("M√©thodes client", test_client_methods),
        ("Configuration", test_configuration),
        ("Dockerfile", test_dockerfile),
        ("Comptage tools", count_tools),
        ("D√©tails tools", show_new_tools_details),
    ]
    
    results = []
    for name, test_func in tests:
        print(f"\nüîç Test: {name}")
        try:
            result = test_func()
            results.append(result)
        except Exception as e:
            print(f"‚ùå Exception pendant {name}: {e}")
            results.append(False)
    
    print("\n" + "=" * 60)
    print("üìä R√©sultats des tests:")
    
    for i, (name, _) in enumerate(tests):
        if i < len(results):
            status = "‚úÖ PASS" if results[i] else "‚ùå FAIL"
            print(f"   {name}: {status}")
    
    success_rate = sum(results) / len(results) if results else 0
    print(f"\nüéØ Taux de r√©ussite: {success_rate:.1%}")
    
    if success_rate == 1.0:
        print("\nüéâ Tous les tests sont pass√©s!")
        print("‚úÖ Les nouveaux tools sont correctement int√©gr√©s dans le code.")
        print("üöÄ Pr√™t pour le d√©ploiement Docker!")
        
        print("\nüìã Pour tester en production:")
        print("   docker-compose up -d")
        print("   curl http://localhost:8080/tools")
        print("   curl -X POST http://localhost:8080/tools/list_downloads \\")
        print("     -H 'Content-Type: application/json' \\")
        print("     -d '{\"params\": {\"limit\": 5}}'")
        
    elif success_rate > 0.5:
        print("\n‚ö†Ô∏è  La plupart des tests passent.")
        print("üîß Quelques ajustements peuvent √™tre n√©cessaires.")
    else:
        print("\n‚ùå Plusieurs tests √©chouent.")
        print("üõ†Ô∏è  V√©rifiez les erreurs ci-dessus.")
    
    return success_rate == 1.0

if __name__ == "__main__":
    import sys
    success = main()
    sys.exit(0 if success else 1)